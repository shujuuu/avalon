#!/usr/bin/env python
########
# 
# kslog - Klondike Share Log Conversion Utility
# 
# (C) Copyright 2013 Chris Savery. 
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 
#

import sys
from sha256 import SHA256
from struct import *

options = "c" if len(sys.argv) < 2 else sys.argv[1]

if 'c' in options:
	print "WORKTASK Work[] = {"
else:
	print "Work = [ "

count = 0
for line in sys.stdin:
	logdata = line.strip().split(',')

	# data 128 bytes: ver 4, prevhash 32, merkleroot 32, time 4, gbt 4, nonce 4, padding 48
	# merkle offset appears to be 64 bytes in
	# so merkle should be last 4 bytes of merkleroot plus time and gbt
	data = logdata[-1].decode('hex')
	minedata = data[64:76].encode('hex')
	nonce = data[76:80].encode('hex')
	
	# midstate is 32 bytes calc'd from 64 bytes of data
	sha = SHA256()
	shadata = pack("<16L", *unpack(">16L", data[0:64]))
	sha.update(shadata)
	midstate = pack(">8L", *unpack("<8L", sha.get_bytes())).encode('hex')

	if count > 0:
		print ","	
		
	# python data output
	if 'p' in options:
		print "[\"%s\", \"%s\", \"%s\", \"%s\"]" % (midstate, minedata, nonce, logdata[1]),

	# C data output
	if 'c' in options:
		print "{ %d, { 0x%s,0x%s,0x%s,0x%s,0x%s,0x%s,0x%s,0x%s }," % (count, midstate[0:8],midstate[8:16],midstate[16:24],midstate[24:32],midstate[32:40],midstate[40:48],midstate[48:56],midstate[56:]),
		print "{ 0x%s,0x%s,0x%s } }" % (minedata[0:8],minedata[8:16],minedata[16:]),

	count = count+1
	
if 'c' in options:	
	print "};"
else:
	print " ]"

# for reference from cgminer			
# static void calc_midstate(struct work *work)
#{
#	unsigned char data[64];
#	uint32_t *data32 = (uint32_t *)data;
#	sha2_context ctx;
#
#	flip64(data32, work->data);  flip first 64 bytes
#	sha2_starts(&ctx);  setup sha256
#	sha2_update(&ctx, data, 64);  do one sha256 round
#	memcpy(work->midstate, ctx.state, 32); get the midstate
#	endian_flip32(work->midstate, work->midstate);  maybe flip 32 bytes depends on endianess of system
#}
	
	
